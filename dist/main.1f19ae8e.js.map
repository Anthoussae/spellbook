{"version":3,"sources":["main.js"],"names":["_createForOfIteratorHelper","r","e","t","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","n","done","value","f","TypeError","o","a","u","call","next","return","_arrayLikeToArray","toString","slice","constructor","name","from","test","state","maxHp","deck","hand","graveyard","relicBelt","relicPool","cardPool","hp","gold","level","currentScreen","presentedPathOptions","presentedRewardOptions","currentEnemy","restHealAmount","pathOptions","goldReward","screen","rewardOptions","type","hpHeal","path","appropriatePathOptions","filter","pathOption","i","presentedPathOptionIndex","Math","floor","random","push","splice","render","rest","min","combat","reward","appropriateRewardOptions","rewardOption","presentedRewardOptionIndex","applyReward","option","renderHud","options","html","optionIndex","outputDiv","document","querySelector","innerHTML","btnElems","querySelectorAll","_iterator","_step","_loop","btnElem","addEventListener","alert","dataset","index","err","setTimeout","_iterator2","_step2","_loop2","renderRelicBelt"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst state = {\n  maxHp: 100,\n  deck: [],\n  hand: [],\n  graveyard: [],\n  relicBelt:[],\n  relicPool: [],\n  cardPool: [],\n  hp: 100,\n  gold: 0,\n  level: 0,\n  currentScreen: \"path\",\n  presentedPathOptions: [],\n  presentedRewardOptions: [],\n  currentEnemy: null,\n  restHealAmount: 25,\n}\n\nlet pathOptions = [\n  {\n    name: \"Three Carrots\",\n    level: 0,\n    hp: 3,\n    goldReward: 3,\n    screen: \"combat\"\n  }, {\n    name: \"Four Carrots\",\n    level: 0,\n    hp: 4,\n    goldReward: 4,\n    screen: \"combat\"\n  }, {\n    name: \"Five Carrots\",\n    level: 0,\n    hp: 5,\n    goldReward: 5,\n    screen: \"combat\"\n  }, {\n    name: \"Six Carrots\",\n    level: 0,\n    hp: 6,\n    goldReward: 6,\n    screen: \"combat\"\n  }, {\n    name: \"Rest\",\n    level: 0,\n    screen: \"rest\",\n  }\n];\n\nlet rewardOptions = [{\n    name: \"Extra ten gold\",\n    level: 1,\n    goldReward: 10,\n    type: \"instant\",\n  }, {\n    name: \"Heal ten HP\",\n    level: 1,\n    hpHeal: 10,\n    type: \"instant\"\n  }, {\n    name: \"Small relic\",\n    level: 1,\n    type: \"relic\"\n  }, {\n    name: \"card\",\n    level: 1,\n    type: \"card\"\n  }, {\n    name: \"Card removal\",\n    level: 1,\n    type: \"deck service\"\n  }, {\n    name: \"Card upgrade\",\n    level: 1,\n    type: \"deck service\"\n  }\n]\n\n\nfunction path(){\n  state.currentScreen = \"path\";\n  const appropriatePathOptions = pathOptions.filter(pathOption => pathOption.level == state.level);\n  const presentedPathOptions = [];\n  for (let i = 0; i < 3; i++){\n    const presentedPathOptionIndex = Math.floor(appropriatePathOptions.length*(Math.random()));\n    presentedPathOptions.push(appropriatePathOptions[presentedPathOptionIndex]);\n    appropriatePathOptions.splice(presentedPathOptionIndex, 1)\n  }\n  state.presentedPathOptions = presentedPathOptions;\n  render(state);\n}\n\n\nfunction rest(){\n  state.currentScreen = \"rest\";\n  state.hp = Math.min(state.hp + state.restHealAmount, state.maxHp);\n  state.level = state.level +1;\n  render(state);\n}\n\nfunction combat(){\n  state.currentScreen = \"combat\";\n  state.level = state.level +1;\n  state.hp = state.hp -1;\n  render(state);\n}\n\n\nfunction reward(){\n  state.currentScreen = 'reward';\n  const appropriateRewardOptions = rewardOptions.filter(rewardOption => rewardOption.level == state.level);\n  const presentedRewardOptions = [];\n  for (let i = 0; i < 3; i++){\n    const presentedRewardOptionIndex = Math.floor(appropriateRewardOptions.length*(Math.random()));\n    presentedRewardOptions.push(appropriateRewardOptions[presentedRewardOptionIndex]);\n    appropriateRewardOptions.splice(presentedRewardOptionIndex, 1)\n  }\n  state.presentedRewardOptions = presentedRewardOptions;\n  render(state);\n}\n\nfunction applyReward(option){\n  if (option.type == \"instant\"){\n    state.hp = Math.min(state.hp + (option.hpHeal || 0), state.maxHp);\n    state.gold = state.gold + (option.goldReward || 0);\n  }\n  else if (option.type == 'relic'){\n    // move the selected option from the relic pool to the relic belt.\n  }\n  else if (option.type == 'card'){\n    // add a copy of the selected option to your deck\n  }\n  else if (option.type == 'deck service'){\n    // launches the subscreen where you can peruse your deck and select 1 card for an effect (removal or upgrade)\n  }\n  else {\n    throw \"unknown reward type\" + option.type \n  }\n}\n\n\nfunction render(state){\n  renderHud();\n  if (state.currentScreen == \"path\"){\n    const options = state.presentedPathOptions;\n    let html = ''\n    for (const optionIndex in options) {\n      const option = options[optionIndex];\n      html += '<button data-index=\"'+optionIndex+'\">'\n      html +=   option.name\n      html += '</button>'\n    }\n    const outputDiv = document.querySelector('#output')\n    outputDiv.innerHTML = html\n\n    const btnElems = document.querySelectorAll('#output button')\n    for (let btnElem of btnElems) {\n      btnElem.addEventListener('click', () => {\n        const name = btnElem.innerHTML\n        alert('You clicked ' + name)\n        const option = options[btnElem.dataset.index]\n        state.currentScreen = option.screen;\n        if (state.currentScreen == 'combat'){\n          state.currentEnemy = option;\n          combat()\n        }\n        else if (state.currentScreen == 'rest'){\n          rest();\n        } else {\n          throw \"Unknown screen: \" + state.currentScreen;\n        }\n      })\n    }\n  }\n  else if (state.currentScreen == \"rest\"){\n    //play animation for 3 seconds - ideally, fade to black, little fireplace crackling, big green +# hp heal visual, and the HP # ticks up visibly, then fade back to path select.\n    let html = 'REST ' + state.hp;\n    const outputDiv = document.querySelector('#output')\n    outputDiv.innerHTML = html\n    setTimeout(() => {\n      path();\n    }, 3000);\n  }\n  else if (state.currentScreen == \"combat\"){\n    reward();\n  }\n  else if (state.currentScreen == 'reward'){\n    const options = state.presentedRewardOptions;\n    let html = ''\n    for (const optionIndex in options) {\n      const option = options[optionIndex];\n      html += '<button data-index=\"'+optionIndex+'\">'\n      html +=   option.name\n      html += '</button>'\n    }\n    const outputDiv = document.querySelector('#output')\n    outputDiv.innerHTML = html\n\n    const btnElems = document.querySelectorAll('#output button')\n    for (let btnElem of btnElems) {\n      btnElem.addEventListener('click', () => {\n        const name = btnElem.innerHTML\n        alert('You clicked ' + name)\n        const option = options[btnElem.dataset.index];\n        //reward effect\n        applyReward(option);\n        renderHud();\n        renderRelicBelt();\n        path();\n      })\n    }\n  }\n  else {\n    throw \"unknown screen\" + state.currentScreen;\n  }\n}\n\nfunction renderHud(){\n  let html = '';\n  html += 'HP: ' + state.hp + \"/\" + state.maxHp + \", \";\n  html += 'Gold: ' + state.gold + \", \";\n  html += 'Level ' + state.level + \", \";\n  // in final version add functionality so you can inspect deck by clicking on deck in hud\n  html += 'Deck ' + state.deck.length;\n  document.querySelector('#hud').innerHTML = html;\n}\n\nfunction renderRelicBelt(){\n  \n}\n\npath()"]}